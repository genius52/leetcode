package diagram

import (
	"container/list"
	"sort"
)

//Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
//Output: 0
func bfs_minMalwareSpread(graph [][]int,bad map[int]bool,del_bad int)int{
	var l int = len(graph)
	var q list.List
	var visited map[int]bool = make(map[int]bool)
	for i := 0;i < l;i++{
		if i == del_bad{
			continue
		}
		if _,ok := bad[i];ok{
			q.PushBack(i)
			visited[i] = true
		}
	}
	var res int = q.Len()
	for q.Len() > 0{
		var cur_len int = q.Len()
		for i := 0;i < cur_len;i++{
			var cur int = q.Front().Value.(int)
			q.Remove(q.Front())
			for j := 0;j < len(graph[cur]);j++{
				if j == del_bad || graph[cur][j] == 0{
					continue
				}
				if _,ok := visited[j];ok{
					continue
				}
				q.PushBack(j)
				visited[j] = true
				res++
			}
		}
	}
	return res
}

func MinMalwareSpread2(graph [][]int, initial []int) int{
	sort.Ints(initial)
	var bad map[int]bool = make(map[int]bool)
	for _,n := range initial{
		bad[n] = true
	}
	var min_cnt int = 2147483647
	var res int = 0
	for _,n := range initial{
		//var visited map[int]bool = make(map[int]bool)
		cnt := bfs_minMalwareSpread(graph,bad,n)
		if cnt < min_cnt{
			min_cnt = cnt
			res = n
		}
	}
	return res
}


//func minMalwareSpread(graph [][]int, initial []int) int {
//	var bad map[int]bool = make(map[int]bool)
//	for _,n := range initial{
//		bad[n] = true
//	}
//
//	//获取所有非污染节点的相邻污染节点
//	var l int = len(graph)
//	var next_bad map[int][]int = make(map[int][]int,l)
//	for i := 0;i < l;i++{
//		if _,ok := bad[i];ok{
//			continue
//		}
//		for next,val := range graph[i]{
//			if next == i{
//				continue
//			}
//			if val == 1{
//				next_bad[i] = append(next_bad[i],next)
//			}
//		}
//	}
//	var good_bad map[int]int = make(map[int]int)
//	//找出普通节点中，只和一个污染节点相邻的
//	for i := 0;i < l;i++{
//		if _,ok := bad[i];ok{
//			continue
//		}
//		if _,ok := next_bad[i];ok{
//			if len(next_bad[i])	== 1{
//				good_bad[i] = next_bad[i][0]
//			}
//		}
//	}
//	var max_cnt int = 0
//	var res int = 0
//	for good,bad := range good_bad{
//
//	}
//	return res
//}